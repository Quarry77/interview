<?php

namespace BioWare\Interview\MessengerBundle\Controller;

use BioWare\Interview\MessengerBundle\Entity\Message;
use BioWare\Interview\MessengerBundle\Entity\FriendList;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class MessengerController extends Controller
{
    /**
     * Logout
     * Logs out from the OAuth session
     */
    public function logoutAction()
    {
        $this->get("request")->getSession()->invalidate();
        $this->get("security.context")->setToken(null);
        $successResponse = new Response('Logged Out');
        return $successResponse;
    }

    /**
     * Add Friend
     * Add a friend to the users friends list given the friends Facebook ID
     *
     * @param facebookID - string provided throught the URL
     */
    public function addFriendAction($facebookId)
    {
        // Load the user table and find the user given the Facebook ID
        $userRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:User');
        $user = $userRepository->findOneByFacebookId($facebookId);

        // If the user is not in the database return a bad request response
        if($user == null) {
            $failureResponse = new Response('User not found, have they logged in yet?');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Load the logged in users Facebook ID from the OAuth token
        $baseId = $this->get("security.context")->getToken()->getUser()->getFacebookId();
        $friendId = $facebookId;

        // Compare the two IDs if they are the same, return a bad request response
        if($baseId == $friendId) {
            $failureResponse = new Response('You Can\'t Add Yourself');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Load the friends list table and check if the entry already exists
        $friendListRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:FriendList');
        $matchingEntry = $friendListRepository->findOneBy(array('baseId' => $baseId, 'friendId' => $friendId));

        // If the two users are already friends, return a success response
        if($matchingEntry != null) {
            $successResponse = new Response('Friend Already Added');
            return $successResponse;
        }

        // Otherwise, create a new entry and add it to the database
        $listEntry = new FriendList();
        $listEntry->setBaseId($baseId);
        $listEntry->setFriendId($friendId);
        $em = $this->getDoctrine()->getManager();
        $em->persist($listEntry);
        $em->flush();

        // Return a success response
        $successResponse = new Response('Friend Added');
        return $successResponse;
    }

    /**
     * Get Friends List
     * Get a list of the users friends in JSON format
     *
     * @return - JSON formatted array containing each friends name and Facebook ID
     */
    public function getFriendsListAction()
    {
        // Load a list of friends list entries based on the logged in users Facebook ID
        $baseId = $this->get("security.context")->getToken()->getUser()->getFacebookId();
        $friendListRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:FriendList');
        $matchingEntries = $friendListRepository->findByBaseId($baseId);

        // Load the user table and for each friend, add the name and Facebook ID to an array
        $userRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:User');
        $friends = Array();
        foreach ($matchingEntries as $key => $value) {
            $friend = $userRepository->findOneByFacebookId($value->getFriendId());

            $friends[$key] = Array('facebookId' => $friend->getFacebookId(), 'name' => $friend->getName());
        }

        // Return the friends list as JSON
        $successResponse = new Response(json_encode($friends));
        return $successResponse;
    }

    /**
     * Add Message
     * Get a list of the users friends in JSON format
     *
     * @param Request - Generated by symfony and used to get the data from the POST request.
     *                  The message must be stored in the data as 'message=<YourMessageHere>'
     * @param facebookID - string provided throught the URL
     */
    public function addMessageAction(Request $request, $facebookId)
    {
        // Loads the message to be added from the POST request
        $text = htmlspecialchars($request->get('message'));
        if($text == null || strlen($text) == 0) {
            $failureResponse = new Response('No Message Found');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Load the user table and find the user given the Facebook ID
        $userRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:User');
        $user = $userRepository->findOneByFacebookId($facebookId);

        // If the user is not in the database return a bad request response
        if($user == null) {
            $failureResponse = new Response('User not found, have they logged in yet?');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Load the logged in users Facebook ID from the OAuth token
        $baseId = $this->get("security.context")->getToken()->getUser()->getFacebookId();
        $friendId = $facebookId;

        // Check to see if the logged in user is friends with the person they are trying to send a message to
        $friendListRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:FriendList');
        $matchingEntry = $friendListRepository->findOneBy(array('baseId' => $baseId, 'friendId' => $friendId));

        // If the two users are not friends, return a failure response
        if($matchingEntry == null) {
            $failureResponse = new Response('User Not Your Friend');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Create a new message entry and add it to the database
        $messageEntry = new Message();
        $messageEntry->setSenderId($baseId);
        $messageEntry->setReceipientId($friendId);
        $messageEntry->setText($text);
        $messageEntry->setTimeCreated(time());
        $em = $this->getDoctrine()->getManager();
        $em->persist($messageEntry);
        $em->flush();

        // Return a success response
        $successResponse = new Response('Message Added');
        return $successResponse;
    }

    /**
     * Get Messages
     * Get a list of the message from one friend in JSON format
     *
     * @param facebookID - string provided throught the URL
     * @return - JSON formatted array containing each friends name and Facebook ID
     */
    public function getMessagesAction($facebookId)
    {
        // Load the user table and find the user given the Facebook ID
        $userRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:User');
        $user = $userRepository->findOneByFacebookId($facebookId);

        // If the user is not in the database return a bad request response
        if($user == null) {
            $failureResponse = new Response('User Not Found, Have they logged in yet?');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Load the logged in user from the OAuth token
        $baseUser = $this->get("security.context")->getToken()->getUser();

        // Check to see if the logged in user is friends with the person they are trying to receive messages from
        $friendListRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:FriendList');
        $matchingEntry = $friendListRepository->findOneBy(array('baseId' => $baseUser->getFacebookId(), 'friendId' => $facebookId));

        // If the two users are not friends, return a failure response
        if($matchingEntry == null) {
            $failureResponse = new Response('User Not Your Friend');
            $failureResponse->setStatusCode(Response::HTTP_BAD_REQUEST);
            return $failureResponse;
        }

        // Prepare the message list for message data
        $messageList = Array(
            'senderId' => $facebookId, 
            'senderName' => $user->getName(), 
            'receipientId' => $baseUser->getFacebookId(), 
            'receipientName' => $baseUser->getName(), 
            'messages' => Array()
        );

        // Get the messages from the friend and add them to the messages array
        $messageRepository = $this->getDoctrine()
            ->getRepository('BioWareInterviewMessengerBundle:Message');
        $matchingEntries = $messageRepository->findBy(
            array('senderId' => $facebookId, 'receipientId' => $baseUser->getFacebookId()),
            array('timeCreated' => 'DESC')
        );
        foreach ($matchingEntries as $key => $value) {
            $messageList['messages'][$key] = Array('message' => $value->getText(), 'timeCreated' => $value->getTimeCreated());
        }

        // Return a success response
        $successResponse = new Response(json_encode($messageList));
        return $successResponse;
    }
}
